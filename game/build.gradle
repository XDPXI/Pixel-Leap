plugins {
    id 'java'
    id 'application'
}

group = 'dev.xdpxi'
version = '1.0.0-Beta.9'

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.4.0-SNAPSHOT"

switch (OperatingSystem.current()) {
	case OperatingSystem.FREE_BSD:
		project.ext.lwjglNatives = "natives-freebsd"
		break
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		def osArch = System.getProperty("os.arch")
		if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
			project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
		} else if (osArch.startsWith("ppc")) {
			project.ext.lwjglNatives += "-ppc64le"
		} else if (osArch.startsWith("riscv")) {
			project.ext.lwjglNatives += "-riscv64"
		}
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
				? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
				: "natives-windows-x86"
		break
}

repositories {
    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation("com.formdev:flatlaf:3.5.4")

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

application {
    mainClass = 'dev.xdpxi.pixelleap.Main'
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
    manifest {
        attributes(
                'Main-Class': 'dev.xdpxi.pixelleap.Main'
        )
    }
}

test {
    useJUnitPlatform()
}